//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controles/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""MovesMap"",
            ""id"": ""48475289-67de-49a3-a054-97854cbfb031"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMove"",
                    ""type"": ""Value"",
                    ""id"": ""415c015d-96fc-4f1a-82c6-c309046f0286"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""JumpMove"",
                    ""type"": ""Button"",
                    ""id"": ""c9d8cfd8-c059-41e3-aea6-31d001ca9e49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Acionar"",
                    ""type"": ""Button"",
                    ""id"": ""01c3cf38-eca6-4a72-b5ef-138d872dbb4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Atacar"",
                    ""type"": ""Button"",
                    ""id"": ""98ac09e4-ce11-43e2-9c25-18985b019273"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trocar"",
                    ""type"": ""Button"",
                    ""id"": ""33827557-832d-47f9-91c7-b5137857ad1c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d3f5f995-1fdf-4dde-a7fd-5caeea69df7f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2578b907-c18b-4388-93c0-86ea67a3bf67"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bb32730c-3755-4a7d-a650-b20ed407b724"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""911f5b10-d268-4eee-9fba-e9ad7b586677"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""08fd8355-17d5-45c6-84d1-eecdc9d13940"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Acionar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72729819-8e6c-434d-ac19-434a7ef7cdb1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atacar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""073bb169-d7c4-445c-90e0-95bc4112dd32"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trocar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MovesMap
        m_MovesMap = asset.FindActionMap("MovesMap", throwIfNotFound: true);
        m_MovesMap_HorizontalMove = m_MovesMap.FindAction("HorizontalMove", throwIfNotFound: true);
        m_MovesMap_JumpMove = m_MovesMap.FindAction("JumpMove", throwIfNotFound: true);
        m_MovesMap_Acionar = m_MovesMap.FindAction("Acionar", throwIfNotFound: true);
        m_MovesMap_Atacar = m_MovesMap.FindAction("Atacar", throwIfNotFound: true);
        m_MovesMap_Trocar = m_MovesMap.FindAction("Trocar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MovesMap
    private readonly InputActionMap m_MovesMap;
    private List<IMovesMapActions> m_MovesMapActionsCallbackInterfaces = new List<IMovesMapActions>();
    private readonly InputAction m_MovesMap_HorizontalMove;
    private readonly InputAction m_MovesMap_JumpMove;
    private readonly InputAction m_MovesMap_Acionar;
    private readonly InputAction m_MovesMap_Atacar;
    private readonly InputAction m_MovesMap_Trocar;
    public struct MovesMapActions
    {
        private @PlayerActions m_Wrapper;
        public MovesMapActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMove => m_Wrapper.m_MovesMap_HorizontalMove;
        public InputAction @JumpMove => m_Wrapper.m_MovesMap_JumpMove;
        public InputAction @Acionar => m_Wrapper.m_MovesMap_Acionar;
        public InputAction @Atacar => m_Wrapper.m_MovesMap_Atacar;
        public InputAction @Trocar => m_Wrapper.m_MovesMap_Trocar;
        public InputActionMap Get() { return m_Wrapper.m_MovesMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovesMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovesMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovesMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovesMapActionsCallbackInterfaces.Add(instance);
            @HorizontalMove.started += instance.OnHorizontalMove;
            @HorizontalMove.performed += instance.OnHorizontalMove;
            @HorizontalMove.canceled += instance.OnHorizontalMove;
            @JumpMove.started += instance.OnJumpMove;
            @JumpMove.performed += instance.OnJumpMove;
            @JumpMove.canceled += instance.OnJumpMove;
            @Acionar.started += instance.OnAcionar;
            @Acionar.performed += instance.OnAcionar;
            @Acionar.canceled += instance.OnAcionar;
            @Atacar.started += instance.OnAtacar;
            @Atacar.performed += instance.OnAtacar;
            @Atacar.canceled += instance.OnAtacar;
            @Trocar.started += instance.OnTrocar;
            @Trocar.performed += instance.OnTrocar;
            @Trocar.canceled += instance.OnTrocar;
        }

        private void UnregisterCallbacks(IMovesMapActions instance)
        {
            @HorizontalMove.started -= instance.OnHorizontalMove;
            @HorizontalMove.performed -= instance.OnHorizontalMove;
            @HorizontalMove.canceled -= instance.OnHorizontalMove;
            @JumpMove.started -= instance.OnJumpMove;
            @JumpMove.performed -= instance.OnJumpMove;
            @JumpMove.canceled -= instance.OnJumpMove;
            @Acionar.started -= instance.OnAcionar;
            @Acionar.performed -= instance.OnAcionar;
            @Acionar.canceled -= instance.OnAcionar;
            @Atacar.started -= instance.OnAtacar;
            @Atacar.performed -= instance.OnAtacar;
            @Atacar.canceled -= instance.OnAtacar;
            @Trocar.started -= instance.OnTrocar;
            @Trocar.performed -= instance.OnTrocar;
            @Trocar.canceled -= instance.OnTrocar;
        }

        public void RemoveCallbacks(IMovesMapActions instance)
        {
            if (m_Wrapper.m_MovesMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovesMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovesMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovesMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovesMapActions @MovesMap => new MovesMapActions(this);
    public interface IMovesMapActions
    {
        void OnHorizontalMove(InputAction.CallbackContext context);
        void OnJumpMove(InputAction.CallbackContext context);
        void OnAcionar(InputAction.CallbackContext context);
        void OnAtacar(InputAction.CallbackContext context);
        void OnTrocar(InputAction.CallbackContext context);
    }
}
